{"version":3,"sources":["components/landingPage.js","components/about.js","components/resume.js","components/projects.js","components/contact.js","components/routes.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","style","width","margin","className","col","src","href","target","class","aria-hidden","Component","AboutMe","Resume","Projects","state","activeTab","toggleCategories","shadow","minWidth","color","height","background","border","display","justifyContent","colored","name","this","onChange","tabId","setState","ripple","ContactMe","routes","exact","path","component","About","App","title","scroll","to","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e96a0ba.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Grid, Cell } from 'react-mdl'\nimport { Link } from 'react-router-dom'\n\nexport default class LandingPage extends Component {\n    render() {\n        return (\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Grid className=\"landing-grid\">\n                    <Cell col={12}>\n                        <img src='https://i.imgur.com/foV3DFT.jpg' className='image-me' />\n\n                        <div className='banner-text'>\n                            <h1>Junior Software Developer</h1>\n\n                            <hr />\n\n                            <p>HTML5/CSS3 | Javscript | NodeJS | Express | MongoDb |\n                                React | Python | Django\n                            </p>\n                            <div className='social-links'>\n                                <a href='https://github.com/justinparrish' target='_blank'>\n                                    <i class=\"fa fa-github-square\" aria-hidden=\"true\" />\n                                </a>\n                                <a href='https://www.linkedin.com/in/justin-parrish-b42057188/' target='_blank'>\n                                    <i className='fa fa-linkedin-square'\n                                        aria-hidden='true' />\n                                </a>\n                            </div>\n                        </div>\n                    </Cell>\n                </Grid>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class AboutMe extends Component {\n    render() {\n        return (\n            <div>\n                <h1>About Me</h1>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\n\n\nexport default class Resume extends Component {\n    render() {\n        return (\n            <div>\n              <h1>Resume</h1>  \n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Tabs, Tab, Grid, Cell, Card, CardTitle, CardText, CardActions, Button, CardMenu, IconButton } from 'react-mdl'\n\nexport default class Projects extends Component {\n    state = {\n        activeTab: 0\n    }\n\n    toggleCategories = () => {\n        if (this.state.activeTab === 0) {\n            return (\n                <Card shadow={5} style={{minWidth: '450', margin: 'auto'}}>\n                    <CardTitle style={{color: '#fff', height: '170px', background: 'url(images/save_chester.png) center / cover'}}>\n                        Save Chester!\n                    </CardTitle>\n                    <CardText>\n                        Created with HTML5/CSS3 and VanillaJs.\n                    </CardText>\n                    <CardActions border style={{display: 'flex', justifyContent: 'space-around'}}>\n                        <Button colored href='https://github.com/justinparrish/project-one'>GitHub</Button>\n                        <Button colored href='https://justinparrish.github.io/project-one/'>Deployed App</Button>\n                    </CardActions>\n                    <CardMenu style={{color: '#fff'}}>\n                        <IconButton name='share'/>\n                    </CardMenu>\n                </Card>\n            )\n        } else if (this.state.activeTab === 1) {\n            return (\n                <div>\n                    <h1>Back End Projects</h1>\n                </div>\n            )\n        } else if (this.state.activeTab === 2) {\n            return (\n                <div>\n                    <h1>Full Stack Projects</h1>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className='category-tabs'>\n                <Tabs activeTab={this.state.activeTab}\n                    onChange={(tabId) => this.setState({ activeTab: tabId })} ripple>\n                    <Tab>Front End</Tab>\n                    <Tab>Back End</Tab>\n                    <Tab>Full Stack</Tab>\n                </Tabs>\n                <section className='project-grid'>\n                    <Grid className='projects-grid'>\n                        <Cell col={12}>\n                            <div className='content'>{this.toggleCategories()}</div>\n                        </Cell>\n                    </Grid>\n                </section>\n            </div >\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class ContactMe extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Contact Me</h1>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport LandingPage from './landingPage'\nimport About from './about'\nimport Resume from './resume'\nimport Projects from './projects'\nimport ContactMe from './contact'\n\nconst routes = () => (\n    <Router>\n        <Switch>\n            <Route exact path='/'component={LandingPage} />\n            <Route exact path='/about' component={About} />\n            <Route exact path='/resume' component={Resume} />\n            <Route exact path='/projects' component={Projects} />\n            <Route exact path='/contact' component={ContactMe} />\n        </Switch>\n    </Router>\n)\n\nexport default routes","import React from 'react';\nimport './App.css'\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl'\nimport { Link } from 'react-router-dom'\nimport Routes from './components/routes'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"demo-big-content\">\n          <Layout>\n            <Header className='header-color' title=\"Justin's Portfolio\" scroll>\n              <Navigation className='nav-text'>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact Me</Link>\n                <Link to=\"/\">Home</Link>\n              </Navigation>\n            </Header>\n            <Drawer title=\"SideBar\">\n              <Navigation>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact Me</Link>\n              </Navigation>\n            </Drawer>\n            <Content>\n              <div className=\"page-content\" />\n              <Routes />\n            </Content>\n          </Layout>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}